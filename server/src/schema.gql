# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Follow {
  createdAt: DateTime!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: String!
  target: User!
  user: User!
}

type Like {
  createdAt: DateTime!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: String!
  user: User!
}

type Mutation {
  createTweet(parentId: ID, text: String!, type: TweetType!): Tweet!
  follow(targetId: ID!): Follow!
  likeTweet(tweetId: ID!): Tweet!
  login(password: String!, username: String!): User!
  me: User!
  signup(password: String!, username: String!): User!
  updateUser(bio: String!, name: String!, website: String!): User!
}

type Notification {
  createdAt: DateTime!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: String!
  target: NotificationTarget!
  targetUser: User!
  type: String!
}

union NotificationTarget = Follow | Like | Tweet

type Query {
  getFeed: [Tweet!]!
  getManyByUsername(query: String!): [User!]!
  getNotifications: [Notification!]!
  getOneByUserId(userId: ID!): User!
  getOneByUsername(username: String!): User!
  getProfileFeed(userId: ID!): [Tweet!]!
  getTweetById(tweetId: ID!): Tweet!
  searchTweets(query: String!): [Tweet!]!
}

type Tweet {
  children: [Tweet!]!
  createdAt: DateTime!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: String!
  likes: [Like!]!
  parent: Tweet
  text: String!
  type: String!
  user: User!
}

enum TweetType {
  REGULAR
  REPLY
  RETWEET
}

type User {
  avatarUrl: String
  bio: String
  createdAt: DateTime!
  followers: [Follow!]!
  following: [Follow!]!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: String!
  name: String!
  username: String!
  website: String
}
